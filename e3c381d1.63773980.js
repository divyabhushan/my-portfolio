(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{109:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return O})),n.d(t,"metadata",(function(){return v})),n.d(t,"rightToc",(function(){return f})),n.d(t,"default",(function(){return k}));var a=n(3),r=n(7),i=n(0),o=n.n(i),c=n(113),s=n(114),l=n(116),b=n(126),u=n(117),p=n(107),d=n.n(p);const m=37,h=39;var g=function(e){const{lazy:t,block:n,children:a,defaultValue:r,values:c,groupId:s,className:l}=e,{tabGroupChoices:p,setTabGroupChoices:g}=Object(b.a)(),[j,O]=Object(i.useState)(r);if(null!=s){const e=p[s];null!=e&&e!==j&&c.some((t=>t.value===e))&&O(e)}const v=e=>{O(e),null!=s&&g(s,e)},f=[];return o.a.createElement("div",null,o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(u.a)("tabs",{"tabs--block":n},l)},c.map((({value:e,label:t})=>o.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":j===e,className:Object(u.a)("tabs__item",d.a.tabItem,{"tabs__item--active":j===e}),key:e,ref:e=>f.push(e),onKeyDown:e=>{((e,t,n)=>{switch(n.keyCode){case h:((e,t)=>{const n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()})(e,t);break;case m:((e,t)=>{const n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()})(e,t)}})(f,e.target,e)},onFocus:()=>v(e),onClick:()=>{v(e)}},t)))),t?Object(i.cloneElement)(a.filter((e=>e.props.value===j))[0],{className:"margin-vert--md"}):o.a.createElement("div",{className:"margin-vert--md"},a.map(((e,t)=>Object(i.cloneElement)(e,{key:t,hidden:e.props.value!==j})))))};var j=function({children:e,hidden:t,className:n}){return o.a.createElement("div",{role:"tabpanel",hidden:t,className:n},e)},O={id:"devops-interview-qs",title:"DevOps Interview Questions and Answers","sidebar-label":"DevOps Interview Q/A"},v={unversionedId:"tech-docs/devops/devops-interview-qs",id:"tech-docs/devops/devops-interview-qs",isDocsHomePage:!1,title:"DevOps Interview Questions and Answers",description:"<Tabs",source:"@site/docs/tech-docs/devops/devops-interview-qs.md",slug:"/tech-docs/devops/devops-interview-qs",permalink:"/my-portfolio/docs/tech-docs/devops/devops-interview-qs",version:"current"},f=[{value:"Beginner Level",id:"beginner-level",children:[{value:"What is DevOps?",id:"what-is-devops",children:[]},{value:"What are some of the tools you have used in DevOps approach?](#collapse-beginner-xs-1181)",id:"what-are-some-of-the-tools-you-have-used-in-devops-approachcollapse-beginner-xs-1181",children:[]},{value:"What is Git?",id:"what-is-git",children:[]},{value:"What is a git commit object? How is it read?](#collapse-beginner-xs-1185)",id:"what-is-a-git-commit-object-how-is-it-readcollapse-beginner-xs-1185",children:[]},{value:"What is the difference between a git reset and a git revert.",id:"what-is-the-difference-between-a-git-reset-and-a-git-revert",children:[]},{value:"How does &#39;git rebase\u2019 work? When should you rebase your work instead of a &#39;git merge\u2019?",id:"how-does-git-rebase-work-when-should-you-rebase-your-work-instead-of-a-git-merge",children:[]},{value:"What is a Docker? Explain its role in DevOps.",id:"what-is-a-docker-explain-its-role-in-devops",children:[]},{value:"What is a Docker image? How are they shared and accessed?",id:"what-is-a-docker-image-how-are-they-shared-and-accessed",children:[]},{value:"How do you work on a container image?",id:"how-do-you-work-on-a-container-image",children:[]},{value:"What is Puppet? What is the need for it?",id:"what-is-puppet-what-is-the-need-for-it",children:[]},{value:"What does &#39;Infrastructure as code\u2019 means in terms of Puppet?",id:"what-does-infrastructure-as-code-means-in-terms-of-puppet",children:[]},{value:"What is Jenkins used for in DevOps?",id:"what-is-jenkins-used-for-in-devops",children:[]},{value:"How do you implement CI/CD using Jenkins?",id:"how-do-you-implement-cicd-using-jenkins",children:[]},{value:"Mention some post condition pipelines options that you used in Jenkinsfile?",id:"mention-some-post-condition-pipelines-options-that-you-used-in-jenkinsfile",children:[]}]},{value:"Advanced Level",id:"advanced-level",children:[{value:"What is CI/CD pipeline?",id:"what-is-cicd-pipeline",children:[]},{value:"2. How do you recover a deleted un-merged branch in your project source code?",id:"2-how-do-you-recover-a-deleted-un-merged-branch-in-your-project-source-code",children:[]},{value:"Explain a good branching structural strategy that you have used for your project code development.",id:"explain-a-good-branching-structural-strategy-that-you-have-used-for-your-project-code-development",children:[]},{value:"What is the key difference between a <code>git rebase</code> and <code>git merge</code>",id:"what-is-the-key-difference-between-a-git-rebase-and-git-merge",children:[]},{value:"How do you list the commits missing in your branch that are present in the remote tracking branch?",id:"how-do-you-list-the-commits-missing-in-your-branch-that-are-present-in-the-remote-tracking-branch",children:[]},{value:"Define client level git hooks and their implementation.",id:"define-client-level-git-hooks-and-their-implementation",children:[]},{value:"How do you create a new image in a container without using a dockerfile?",id:"how-do-you-create-a-new-image-in-a-container-without-using-a-dockerfile",children:[]},{value:"Create a docker file and build a new image. Run the image and create a container.",id:"create-a-docker-file-and-build-a-new-image-run-the-image-and-create-a-container",children:[]},{value:"Develop your own custom test environment and publish it on the docker hub.",id:"develop-your-own-custom-test-environment-and-publish-it-on-the-docker-hub",children:[]},{value:"How do you prune data in a Docker?",id:"how-do-you-prune-data-in-a-docker",children:[]},{value:"Explain Docker Orchestration",id:"explain-docker-orchestration",children:[]},{value:"When joining a new node to the swarm the following error occurs: \u201cError response from daemon: Timeout was reached before node joined.\u201d How will you fix this?",id:"when-joining-a-new-node-to-the-swarm-the-following-error-occurs-error-response-from-daemon-timeout-was-reached-before-node-joined-how-will-you-fix-this",children:[]},{value:"What are resources? How do you handle system resources in Puppet?",id:"what-are-resources-how-do-you-handle-system-resources-in-puppet",children:[]},{value:"Write a sample module to install LAMP on an existing Ubuntu Server Docker image.",id:"write-a-sample-module-to-install-lamp-on-an-existing-ubuntu-server-docker-image",children:[]},{value:"How is Jenkins workspace data shared between different jobs?",id:"how-is-jenkins-workspace-data-shared-between-different-jobs",children:[]},{value:"How can Jenkins facilitate Deployment in a DevOps practice?",id:"how-can-jenkins-facilitate-deployment-in-a-devops-practice",children:[]},{value:"How does Jenkins handle a failed test case?",id:"how-does-jenkins-handle-a-failed-test-case",children:[]},{value:"How to backup and restore Jenkins data and configurations",id:"how-to-backup-and-restore-jenkins-data-and-configurations",children:[]}]}],y={rightToc:f};function k(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},y,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)(g,{defaultValue:"Beginner",values:[{label:"Beginner",value:"Beginner Level"},{label:"Advanced",value:"Advanced Level"}],mdxType:"Tabs"},Object(c.b)(j,{value:"Beginner Level",mdxType:"TabItem"},Object(c.b)(l.a,{to:Object(s.a)("##beginner-level"),mdxType:"Link"},"Beginner Level")),Object(c.b)(j,{value:"Advanced Level",mdxType:"TabItem"},Object(c.b)(l.a,{to:Object(s.a)("##advanced-level"),mdxType:"Link"},"Advanced Level"))),Object(c.b)("h2",{id:"beginner-level"},"Beginner Level"),Object(c.b)("h3",{id:"what-is-devops"},"What is DevOps?"),Object(c.b)("p",null,"DevOps is an approach to collaborate the development and operations teams for a better, bug-free continuous delivery and integration of the source code.",Object(c.b)("br",{parentName:"p"}),"\n","DevOps is about automating the entire SDLC (Software Development Life Cycle) process with the implementation of CI/CD practices.\nCI/CD are the Continuous integration and continuous deployment methodologies.",Object(c.b)("br",{parentName:"p"}),"\n","Every source code check-in will automatically build and unit test the entire code against a",Object(c.b)("br",{parentName:"p"}),"\n","production like environment and continuously deployed to production environment after it passes its automated tests.",Object(c.b)("br",{parentName:"p"}),"\n","That eliminates the long feedback, bug-fix, and product enhancements loops between every",Object(c.b)("br",{parentName:"p"}),"\n","Release.\nEvery team takes the accountability of the entire product right from the requirement analysis to documentation to coding, testing in development environments, code deployment and continuous improvements in terms of bugs and feedback from reviewers and the customers."),Object(c.b)("h3",{id:"what-are-some-of-the-tools-you-have-used-in-devops-approachcollapse-beginner-xs-1181"},"What are some of the tools you have used in DevOps approach?](#collapse-beginner-xs-1181)"),Object(c.b)("p",null,"Considering DevOps to be an ideology towards achieving a quality product, every organization has its own guidelines and approach towards it.",Object(c.b)("br",{parentName:"p"}),"\n","Some of the popular tools I have used are:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Git as a Distributed VCS to manage the source code."),Object(c.b)("li",{parentName:"ul"},"Jenkins to achieve CI/CD (Continuous Integration and Continuous Delivery) +plugins"),Object(c.b)("li",{parentName:"ul"},"Puppet for Configuration Management and Deployment tool"),Object(c.b)("li",{parentName:"ul"},"Nagios for Continuous Monitoring; and"),Object(c.b)("li",{parentName:"ul"},"Docker for containerization.")),Object(c.b)("h3",{id:"what-is-git"},"What is Git?"),Object(c.b)("p",null,"Git is a Distributed Version Control System; used to logically store and backup the entire history of how your project source code has developed, keeping a track of every version change of the code."),Object(c.b)("p",null,"Git facilitates very flexible and efficient branching and merging of your code with other collaborators.Being distributed git is extremely fast and more reliable as every developer has his own local copy of the entire repository."),Object(c.b)("p",null,"Git allows you to undo the mistakes in the source code at different tiers of its architecture namely- Working directory, Staging (Index) area, Local repository, and Remote repository."),Object(c.b)("p",null,"Using Git we can always get an older version of our source code and work on it.Git tracks every bit of data as it checksums every file into unique hash codes referring to them via pointers."),Object(c.b)("p",null,"To summarize Git is the most efficient and widely used VCS, used by major companies like Linux, Google, Facebook, Microsoft, Twitter, LinkedIn, Netflix, Android, Amazon, IBM, Apple IOS to name a few\u2026"),Object(c.b)("h3",{id:"what-is-a-git-commit-object-how-is-it-readcollapse-beginner-xs-1185"},"What is a git commit object? How is it read?](#collapse-beginner-xs-1185)"),Object(c.b)("p",null,"When a project repository is initialized to be a git repository, git stores all its metadata in a hidden folder \u201c.git\u201d under the project root directory.",Object(c.b)("br",{parentName:"p"}),"\n","Git repository is a collection of ",Object(c.b)("em",{parentName:"p"},"objects."),"\xa0"),Object(c.b)("p",null,"Git has 4 types of objects \u2013 blobs, trees, tags, and commits."),Object(c.b)("p",null,"Every commit creates a new ",Object(c.b)("em",{parentName:"p"},"commit object")," with a unique SHA-1 hash_id.",Object(c.b)("br",{parentName:"p"}),"\n","Each commit object has a pointer reference to the tree object, its parent object, author, committer and the commit message.",Object(c.b)("br",{parentName:"p"}),"\n",Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552023479018-DevOps--set2-.jpg",alt:"DevOps"})),Object(c.b)("p",null,"Diagram: Single Commit object"),Object(c.b)("p",null,"To see the commit log message along with the textual diff of the code, run:",Object(c.b)("br",{parentName:"p"}),"\n","git show ",Object(c.b)("inlineCode",{parentName:"p"},"<commit_id>"),"\n",Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552023545395-CODE-SNIPPET.png.jpg",alt:null})),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"Divya1@Divya:initialRepo [master] $git show f9354cb\ncommit f9354cb08d91e80cabafd5b54d466b6055eb2927\nAuthor: divya bhushan <divya_bhushan@hotmail.com>\nDate:   Mon Feb 11 23:39:24 2019 +0100\n    Add database logs.\ndiff --git a/logs/db.log b/logs/db.log\nnew file mode 100644\nindex 0000000..f8854b0\n--- /dev/null\n+++ b/logs/db.log\n@@ -0,0 +1 @@\n+database logs\n")),Object(c.b)("p",null,"To read a commit object git has 'git cat-file\u2019 utility.",Object(c.b)("br",{parentName:"p"}),"\n",Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552023639240-CODE-SNIPPET.png.jpg",alt:null})),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"Divya1@Divya:initialRepo [master] $git cat-file -p f9354cb\ntree 2a85825b8d20918350cc316513edd9cc289f8349\nparent 30760c59d661e129329acfba7e20c899d0d7d199\nauthor divya bhushan <divya_bhushan@hotmail.com> 1549924764 +0100\ncommitter divya bhushan <divya_bhushan@hotmail.com> 1549924764 +0100 \nAdd database logs.\n")),Object(c.b)("p",null,"A tree object is like an OS directory that stores references to other directories and files (blob type).",Object(c.b)("br",{parentName:"p"}),"\n",Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552023752556-CODE-SNIPPET.png.jpg",alt:null})),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"Divya1@Divya:initialRepo [master] $git cat-file -p 2a85825b8d20918350cc316513edd9cc289f8349\n100755 blob 054acd444517ad5a0c1e46d8eff925e061edf46c README.md\n040000 tree dfe42cbaf87e6a56b51dab97fc51ecedfc969f39 code\n100644 blob e08d4579f39808f3e2830b5da8ac155f87c0621c dockerfile\n040000 tree 014e65a65532dc16a6d50e0d153c222a12df4742   logs\n")),Object(c.b)("h3",{id:"what-is-the-difference-between-a-git-reset-and-a-git-revert"},"What is the difference between a git reset and a git revert."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"git revert is used to record some new commits to reverse the effect of some earlier commits/snapshot of a project."),Object(c.b)("li",{parentName:"ul"},"Instead of removing the commit from the project history, it figures out how to undo the changes introduced by the commit & appends a new commit with the resulting content in the current branch.")),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552024197659-What-is-the-difference-between-a-git-reset-and-a-git-revert.jpg",alt:"difference-between-a-git-reset-and-a-git"})),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"Usage:")," git revert <commit_id>"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"Use:")," To undo an entire commit from your project history; removing a bug introduced by a commit.")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Reset Vs Revert")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"git \u201creset\u201d: resets the project to a previous snapshot erasing the changes."),Object(c.b)("li",{parentName:"ul"},"git \u201crevert\u201d does not change the project history unlike git \u201creset\u201d"),Object(c.b)("li",{parentName:"ul"},"Git \u201crevert\u201d undoes the commit id changes and applies the undo work as a new commit id object.")),Object(c.b)("h3",{id:"how-does-git-rebase-work-when-should-you-rebase-your-work-instead-of-a-git-merge"},"How does 'git rebase\u2019 work? When should you rebase your work instead of a 'git merge\u2019?"),Object(c.b)("p",null,"There are scenarios wherein one would like to merge a quickfix or feature branch with not a huge commit history into another 'dev\u2019 or 'uat\u2019 branch and yet maintain a linear history."),Object(c.b)("p",null,"A non-fast forward 'git merge\u2019 would result in a diverged history. Also when one wants the feature merged commits to be the latest commits; 'git rebase\u2019 is an appropriate way of merging the two branches."),Object(c.b)("p",null,"'git rebase\u2019 replays the commits on the current branch and place them over the tip of the rebased branch.Since it replays the commit ids, rebase rewrites commit objects and create a new object id(SHA-1). Word of caution: Do not use it if the history is on release/production branch and being shared on the central server. Limit the rebase on your local repository only to rebase quickfix or feature branches."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Steps:")),Object(c.b)("p",null,"Say there is a 'dev\u2019 branch that needs a quick feature to be added along with the test cases from 'uat\u2019 branch."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"Step 1:")," Branch out 'new-feature\u2019 branch from 'dev\u2019.")),Object(c.b)("p",null,"Develop the new feature and make commits in 'new-feature\u2019 branch."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"[dev ] $git checkout -b new-feature\n[new-feature ] $ git add lib/commonLibrary.sh && git commit -m \u201cAdd commonLibrary file\u201d\nDivya1@Divya:rebase_project [new-feature] $git add lib/commonLibrary.sh && git commit -m 'Add commonLibrary file'Divya1@Divya:rebase_project [new-feature] $git add feature1.txt && git commit -m 'Add feature1.txt'\nDivya1@Divya:rebase_project [new-feature] $git add feature2.txt && git commit -m 'Add feature2.txt'\n")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"Step 2:")," Merge 'uat\u2019 branch into 'dev\u2019")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"[dev] $ git merge uat\n")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"Step 3:")," Rebase 'new-feature\u2019 on 'dev\u2019")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"Divya1@Divya:rebase_project [dev] $git checkout new-featureDivya1@Divya:rebase_project [new-feature] $git rebase dev\nFirst, rewinding head to replay your work on top of it...\nApplying: Add commonLibrary file\nApplying: Add feature1.txt\nApplying: Add feature2.txt\n")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"Step 4:")," Switch to 'dev\u2019 branch and merge 'new-feature\u2019 branch, this is going to be a fast-forward merge as 'new-feature\u2019 has already incorporated 'dev\u2019+\u2019uat\u2019 commits.")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"Divya1@Divya:rebase_project [new-feature] $git checkout dev\nDivya1@Divya:rebase_project [dev] $git merge new-feature\nUpdating 5044e24..3378815\nFast-forward\nfeature1.txt         | 1 +\nfeature2.txt         | 1 +\nlib/commonLibrary.sh | 16 ++++++++++++++++\n3 files changed, 18 insertions(+)\ncreate mode 100644 feature1.txt\ncreate mode 100644 feature2.txt\ncreate mode 100644 lib/commonLibrary.sh\n")),Object(c.b)("p",null,"this will result in linear history with 'new-feature\u2019 results being at the top and 'dev\u2019 commits being pushed later."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"Step 5:")," View the history of 'dev\u2019 after merging 'uat\u2019 and 'new-feature\u2019 (rebase)")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"Divya1@Divya:rebase_project [dev] $git hist\n* 3378815 2019-02-14 | Add feature2.txt (HEAD -> dev, new-feature) [divya bhushan]\n* d3859c5 2019-02-14 | Add feature1.txt [divya bhushan]\n* 93b76f7 2019-02-14 | Add commonLibrary file [divya bhushan]\n*   5044e24 2019-02-14 | Merge branch 'uat' into dev [divya bhushan]\n|  \n| * bb13fb0 2019-02-14 | End of uat work. (uat) [divya bhushan]\n| * 0ab2061 2019-02-14 | Start of uat work. [divya bhushan]\n* | a96deb1 2019-02-14 | End of dev work. [divya bhushan]\n* | 817544e 2019-02-14 | Start of dev work. [divya bhushan]\n|/  \n* 01ad76b 2019-02-14 | Initial project structure. (tag: v1.0, master) [divya bhushan]\n")),Object(c.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(c.b)("div",{parentName:"div",className:"admonition-heading"},Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",{parentName:"h5",className:"admonition-icon"},Object(c.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(c.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(c.b)("div",{parentName:"div",className:"admonition-content"},Object(c.b)("p",{parentName:"div"},"NOTE: 'dev\u2019 will show a diverged commit history for 'uat\u2019 merge and a linear history for 'new-feature\u2019 merge."))),Object(c.b)("h3",{id:"what-is-a-docker-explain-its-role-in-devops"},"What is a Docker? Explain its role in DevOps."),Object(c.b)("p",null,"Every source code deployment needs to be portable and compatible on every device and environment."),Object(c.b)("p",null,"Applications and their run time environment such as libraries and other dependencies like binaries, jar files, configuration files etc.. are bundled up(packaged) in a ",Object(c.b)("strong",{parentName:"p"},"Container"),"."),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Containers")," as a whole are portable, consistent and compatible with any environment."),Object(c.b)("p",null,"In development words, a developer can run its application in any environment: dev, uat, preprod and production without worrying about the run-time dependencies of the application."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Docker is a container platform."),Object(c.b)("li",{parentName:"ul"},"Docker is a framework that provides an abstraction layer to manage containers."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("em",{parentName:"li"},"Docker")," is a containerization engine, which automates packaging, shipping, and deployment of any software applications or ",Object(c.b)("em",{parentName:"li"},"Containers.")),Object(c.b)("li",{parentName:"ul"},"Docker also lets us test the code and then deploy it in production."),Object(c.b)("li",{parentName:"ul"},"Docker along with Jenkins (a Continuous Integration tool) and Git plugin contributes in CI/CD process.")),Object(c.b)("h3",{id:"what-is-a-docker-image-how-are-they-shared-and-accessed"},"What is a Docker image? How are they shared and accessed?"),Object(c.b)("p",null,"A developer writes code instructions to define all the applications and its dependencies in a file called a \u201cDockerfile\u201d.Dockerfile is used to create a 'Docker image' using the ",Object(c.b)("inlineCode",{parentName:"p"},"docker build <directory>")," command.The build command is run by the docker daemon.  "),Object(c.b)("p",null,"When you run a Docker image \u201cContainers\u201d are created. Containers are runtime instances of a Docker image."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A Container can have many images."),Object(c.b)("li",{parentName:"ul"},"Docker containers are stored in a docker registry on docker host."),Object(c.b)("li",{parentName:"ul"},"Docker has a client-Server architecture."),Object(c.b)("li",{parentName:"ul"},"Docker registry is generally pushed and shared on a Docker hub (Remote server).")),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552025560274-What-is-a-Docker-image-How-are-they-shared-and-accessed.jpg",alt:"Docker-image-How-are-they-shared-and-accessed"})),Object(c.b)("p",null,"Image credit: ",Object(c.b)("a",{parentName:"p",href:"https://docs.docker.com/engine/docker-overview/"},"docs.docker.com")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Other developers 'Docker pull\u2019 these registry images and create containers in their own environment."),Object(c.b)("li",{parentName:"ul"},"Developers can run their applications in the same docker container as their peers."),Object(c.b)("li",{parentName:"ul"},"This way you can get the same test environment on different servers with the same applications and dependencies.")),Object(c.b)("h3",{id:"how-do-you-work-on-a-container-image"},"How do you work on a container image?"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"--Get docker images from docker hub or your docker repository\n\ndocker pull busybox\ndocker pull centos\ndocker pull divyabhushan/myrepo\nDivya1@Divya:~ $docker pull divyabhushan/myrepo\nUsing default tag: latest\nlatest: Pulling from divyabhushan/myrepo\n6cf436f81810: Pull complete\n987088a85b96: Pull complete\nb4624b3efe06: Pull complete\nd42beb8ded59: Pull complete\nd08b19d33455: Pull complete\n80d9a1d33f81: Pull complete\nDigest: sha256:c82b4b701af5301cc5d698d963eeed46739e67aff69fd1a5f4ef0aecc4bf7bbf\nStatus: Downloaded newer image for divyabhushan/myrepo:latest\n")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"--List the docker images\n\nDivya1@Divya:~ $docker images\nREPOSITORY            TAG IMAGE ID            CREATED SIZE\ndivyabhushan/myrepo   latest 72a21c221add        About an hour ago 88.1MB\nbusybox               latest 3a093384ac30        5 weeks ago 1.2MB\ncentos                latest 1e1148e4cc2c        2 months ago 202MB\n")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"--Create a docker container by running the docker image\n\n--pass a shell argument \xa0: uname -a\n\nDivya1@Divya:~ $docker run centos uname -a\nLinux c70fc2da749a 4.9.125-linuxkit #1 SMP Fri Sep 7 08:20:28 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\n")),Object(c.b)("p",null,"--Docker images can be built by reading a dockerfile",Object(c.b)("br",{parentName:"p"}),"\n",Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552025878271-DevOps--set2--1.jpg",alt:"dockerfile"})),Object(c.b)("p",null,"--build a new image : 'newrepo\u2019 with tag:1.0 from the dockerFiles/dockerfile"),Object(c.b)("p",null,"docker build -t newrepo:1.1 dockerFiles/"),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552025892215-DevOps--set2--2.jpg",alt:"dockerfile"})),Object(c.b)("p",null,"-- Now create a container from the above image:"),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552025914827-DevOps--set2--3.jpg",alt:"dockerfile"})),Object(c.b)("p",null,"-- List all the containers"),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552025930794-DevOps--set2--4.jpg",alt:"dockerfile"})),Object(c.b)("p",null,"-- start the container"),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552025951229-DevOps--set2--5.jpg",alt:"dockerfile"})),Object(c.b)("p",null,"--List only the running containers"),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552025971609-DevOps--set2--6.jpg",alt:"dockerfile"})),Object(c.b)("h3",{id:"what-is-puppet-what-is-the-need-for-it"},"What is Puppet? What is the need for it?"),Object(c.b)("p",null,"Puppet is a Configuration Management and deployment tool for administrative tasks.\nThis tool helps in automating the provisioning, configuration, and management of Infrastructure and Systems."),Object(c.b)("p",null,"In simple words:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Puppet helps administrators to automate the process of manually creating and configuring Virtual machines."),Object(c.b)("li",{parentName:"ul"},"Say, you have to bring up 'n\u2019 number of Servers with 'x\u2019 number of VMs(Virtual machines) on them. Each VM needs to be configured for certain users, groups, services, applications, and databases etc."),Object(c.b)("li",{parentName:"ul"},"The entire infrastructure can be loaded up with the help of Puppet programs re-using the codes on multiple servers."),Object(c.b)("li",{parentName:"ul"},"Key feature: Idempotency"),Object(c.b)("li",{parentName:"ul"},"The same set of configurations can be run multiple times to build a machine on a server, as puppet would allow only unique configurations to be run.")),Object(c.b)("h3",{id:"what-does-infrastructure-as-code-means-in-terms-of-puppet"},"What does 'Infrastructure as code\u2019 means in terms of Puppet?"),Object(c.b)("p",null,"Entire Server Infrastructure setup configurations are written in terms of codes and re-used on all the Puppet Server agent\u2019s nodes(machines) that are connected via a Puppet master Server.\nThis is achieved by the use of code snippets called 'manifests\u2019; that are configuration files for every Server agent node."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Each manifest (program files with *.pp extension) consists of the resources and the codes."),Object(c.b)("li",{parentName:"ul"},"We can review, deploy and test the environment configuration for development, testing and production environments."),Object(c.b)("li",{parentName:"ul"},"Puppet manifests written once are deployed on any environment to build up the same infrastructure.")),Object(c.b)("h3",{id:"what-is-jenkins-used-for-in-devops"},"What is Jenkins used for in DevOps?"),Object(c.b)("p",null,"Jenkins is a self-contained, open source automation server(tool) for continuous development.\nJenkins aids and automates CI/CD process."),Object(c.b)("p",null,"It gets the checked in code from VCS like Git using a 'git plugin\u2019, build the source code, run test cases in a production-like environment and make the code release ready using 'deploy\u2019 plugin."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"These continuous ",Object(c.b)("em",{parentName:"li"},"delivery pipeline_s are written in a '_Jenkinsfile\u2019")," which is also checked into project\u2019s source code and version controlled by Git."),Object(c.b)("li",{parentName:"ul"},"Pipelines are a continuous set of jobs that are run for continuous delivery and these jobs are integrated at every section of the workflow."),Object(c.b)("li",{parentName:"ul"},"Jenkins pipelines easily connect to Docker images and containers to run inside."),Object(c.b)("li",{parentName:"ul"},"Pipelines easily provide the desired test environment without having to configure the various system tools and dependencies.")),Object(c.b)("p",null,"Sample Jenkins file"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-json"},"pipeline {\n   agent { docker { image 'ubuntu:latest' } }\n   stages {\n       stage('build') {\n           steps {\n               sh 'uname -a'\n           }\n       }\n   }\n}\n")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Jenkins will start the container- ubuntu with the latest image and execute the test case steps inside it."),Object(c.b)("li",{parentName:"ul"},"agent directive says where and how to execute the pipeline"),Object(c.b)("li",{parentName:"ul"},"jenkinsfile (declarative pipeline)"),Object(c.b)("li",{parentName:"ul"},"pipeline"),Object(c.b)("li",{parentName:"ul"},"Jenkins saves us the trouble of debugging after a huge commit history if there was a code break.")),Object(c.b)("h3",{id:"how-do-you-implement-cicd-using-jenkins"},"How do you implement CI/CD using Jenkins?"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Continuous Integration using Jenkins and Git plugin"),Object(c.b)("li",{parentName:"ul"},"Create a new Jenkins item as a 'Pipeline\u2019."),Object(c.b)("li",{parentName:"ul"},"Add 'Git\u2019 as branch source and give the Project repository url."),Object(c.b)("li",{parentName:"ul"},"Every time source code is pushed to the remote git repository from the local git repo;"),Object(c.b)("li",{parentName:"ul"},"Jenkins job gets started(triggered)."),Object(c.b)("li",{parentName:"ul"},"Jenkins build the code and the output is available under \u201cconsole output\u201d"),Object(c.b)("li",{parentName:"ul"},"In the git repository add a 'jenkinsfile\u2019 commit and push the code to git repository."),Object(c.b)("li",{parentName:"ul"},"Add a Jenkinsfile in the git repository")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-json"},"pipeline {\n   agent { docker { image 'ubuntu:latest' } }\n   stages {\n       stage('build') {\n           steps {\n               sh 'uname -a'\n           }\n       }\nstage('Test') {\n           steps {\n               sh './jenkins/scripts/test.sh'\n           }\n       }\n   }\n}\n")),Object(c.b)("h3",{id:"mention-some-post-condition-pipelines-options-that-you-used-in-jenkinsfile"},"Mention some post condition pipelines options that you used in Jenkinsfile?"),Object(c.b)("p",null,"We can mention some test conditions to run post the completion of stages in a pipeline."),Object(c.b)("p",null,"Code snippet"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-json"},"post {\nalways {\necho \u201cThis block runs always !!!\u201d\n}\nsuccess {\necho \u201cThis block runs when the stages has a success status\u201d\n}\nunstable {\necho \u201cThis block is run when the stages abort with an unstable status\u201d\n}\n}\n")),Object(c.b)("p",null,"Here are the post conditions reserved for jenkinsfile:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"always:"))),Object(c.b)("p",null,"Run the steps in the post section regardless of the completion status of the Pipeline\u2019s or stage\u2019s run."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"unstable:"))),Object(c.b)("p",null,'Only run the steps in post if the current Pipeline\u2019s or stage\u2019s run has an "unstable" status, usually caused by test failures, code violations, etc.'),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"aborted:"))),Object(c.b)("p",null,"Only run the steps in post if the current Pipeline\u2019s or stage\u2019s run has an \u201caborted\u201d status."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"success:"))),Object(c.b)("p",null,'Only run the steps in post if the current Pipeline\u2019s or stage\u2019s run has a "success" status.'),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"failure:"))),Object(c.b)("p",null,'Only run the steps in post if the current Pipeline\u2019s or stage\u2019s run has a "failed" status.'),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"changed:"))),Object(c.b)("p",null,"Only run the steps in post if the current Pipeline\u2019s or stage\u2019s run has a different completion status from its previous run."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"cleanup:"))),Object(c.b)("p",null,"Run the steps in this post condition after every other post condition has been evaluated, regardless of the Pipeline or stage\u2019s status."),Object(c.b)("h2",{id:"advanced-level"},"Advanced Level"),Object(c.b)("h3",{id:"what-is-cicd-pipeline"},"What is CI/CD pipeline?"),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Continuous Integration")," is a development practice wherein developers regularly merge or ",Object(c.b)("em",{parentName:"p"},"integrate")," their code changes into a common shared repository very frequently (*).Every code check-in is then verified by automated build and automated test cases."),Object(c.b)("p",null,"This approach helps to detect and fix the bugs early, improve software quality,reduce the validation and feedback loop time; hence increasing the overall product quality and speedy product releases."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"(*) Unlike traditional SDLC process wherein a developer would wait until the completion of the code before he/she shares the work on the shared repository."),Object(c.b)("li",{parentName:"ul"},"Git becomes the best VCS tool with its strong, easy and reliable branching and merging architecture for Continuous Integration in a DevOps environment."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("em",{parentName:"li"},"Continuous Delivery")," is a software practice where every code check-in is automatically built, tested and ready for a release(delivery) to production."),Object(c.b)("li",{parentName:"ul"},"Every code check-in should be release/deployment ready."),Object(c.b)("li",{parentName:"ul"},"CD is an extension to CI."),Object(c.b)("li",{parentName:"ul"},"CD phase delivers the code to a production like environment such as dev, uat, preprod etc and run automated tests."),Object(c.b)("li",{parentName:"ul"},"On successful implementation of continuous delivery in the prod-like environment the code is ready to be deployed to the main production server.")),Object(c.b)("h3",{id:"2-how-do-you-recover-a-deleted-un-merged-branch-in-your-project-source-code"},"2. How do you recover a deleted un-merged branch in your project source code?"),Object(c.b)("p",null,"By default, git does not allow you to delete a branch whose work has not yet been merged into the main branch."),Object(c.b)("p",null,"To see the list of branches not merged with the checked out branch run:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"Divya1@Divya:initialRepo [master] $git branch --no-merged\n dev\n")),Object(c.b)("p",null,"\xa0--If you try to delete this branch, git displays a warning:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"Divya1@Divya:initialRepo [master] $git branch -d dev\nerror: The branch 'dev' is not fully merged.\n")),Object(c.b)("p",null,"If you are sure you want to delete it, run ",Object(c.b)("inlineCode",{parentName:"p"},"git branch -D dev"),"."),Object(c.b)("p",null,"--If it is still deleted using the -D flag as:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"Divya1@Divya:initialRepo [master] $git branch -D dev\n")),Object(c.b)("p",null,"--See the references log information"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"Divya1@Divya:initialRepo [master] $git reflog\ncb9da2b (HEAD -> master) HEAD@{0}: checkout: moving from dev to master\nb834dc2 (origin/master, origin/dev) HEAD@{1}: checkout: moving from master to dev\ncb9da2b (HEAD -> master) HEAD@{2}: checkout: moving from master to master\ncb9da2b (HEAD -> master) HEAD@{3}: checkout: moving from dev to master\nb834dc2 (origin/master, origin/dev) HEAD@{4}: checkout: moving from master to dev\ncb9da2b (HEAD -> master) HEAD@{5}: checkout: moving from uat to master\n03224ed (**uat**) HEAD@{6}: checkout: moving from dev to uat\nb834dc2 is the commit id when we jumped to \u2018dev\u2019 branch  \nCreate a branch named \u2018dev\u2019 from this commit id again.\n")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"Divya1@Divya:initialRepo [master] $git checkout -b dev b834dc2\nSwitched to a new branch 'dev'\nDivya1@Divya:initialRepo [dev]\n")),Object(c.b)("h3",{id:"explain-a-good-branching-structural-strategy-that-you-have-used-for-your-project-code-development"},"Explain a good branching structural strategy that you have used for your project code development."),Object(c.b)("p",null,"A good branching strategy is the one that adapts to your project and business needs. Every organization has a set of its own defined SDLC processes.",Object(c.b)("br",{parentName:"p"}),"\n","An example branching structural strategy that I have used in my project:",Object(c.b)("br",{parentName:"p"}),"\n",Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552023943133-Explain-a-good-branching-structural-strategy-that-you-have-used-for-your-project-code-development.jpg",alt:"good-branching-structural-strategy"})),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"Diagram:")," Branching strategy"),Object(c.b)("li",{parentName:"ul"},"Clone the project available at github:"),Object(c.b)("li",{parentName:"ul"},"git clone ",Object(c.b)("a",{parentName:"li",href:"http://github.com/divyabhushan/structuralStrategy.git"},"http://github.com/divyabhushan/structuralStrategy.git")," structuralStrategy")),Object(c.b)("p",null,"\xa0",Object(c.b)("strong",{parentName:"p"},"Guidelines:")," "),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"\u201cmaster-prod\u201d: Accepts merges/code/commits only from the \u201cprod\u201d branch"),Object(c.b)("li",{parentName:"ul"},"\u201cprod\u201d: Perform only a merge --squash from \u201crelease\u201d branch."),Object(c.b)("li",{parentName:"ul"},"Merge only when approved by \u201cQA\u201d"),Object(c.b)("li",{parentName:"ul"},"Tag every merge in the format: v1.0, v1.1 \u2026 v1.*"),Object(c.b)("li",{parentName:"ul"},"\u201crelease\u201d: merge from the branches \u201cdev\u201d, \u201cuat\u201d, \u201cQA\u201d."),Object(c.b)("li",{parentName:"ul"},"Every release commit/project code version has to be approved by \u201cQA\u201d."),Object(c.b)("li",{parentName:"ul"},"Tag every merge in the format: r1.0, r1.1 \u2026 r1.*"),Object(c.b)("li",{parentName:"ul"},"\u201cdev\u201d and \u201cuat\u201d never merge with each other."),Object(c.b)("li",{parentName:"ul"},"\u201chotfix\u201d branch commits are shared among any feature branches such as \u201cdev\u201d and \u201cuat\u201d"),Object(c.b)("li",{parentName:"ul"},"\u201cfeature\u201d branch is private to \u201cdev\u201d alone and is dropped after merging."),Object(c.b)("li",{parentName:"ul"},"CI/CD DevOps tools can be used to automate the above development and deployment to master_prod."),Object(c.b)("li",{parentName:"ul"},"Every project release: r1.0 .. r1.x on the \u2018release\u2019 branch can be tracked by Jenkins CI tool and will trigger a build, on a successful build continuous testing suite\xa0"),Object(c.b)("li",{parentName:"ul"},"cases will be triggered on the code. If the test passes the release will be delivered to \u2018prod\u2019 branch."),Object(c.b)("li",{parentName:"ul"},"Every source code delivered to \u2018prod\u2019 branch will be automatically deployed to \u2018master_prod\u2019 branch.")),Object(c.b)("p",null,"All the steps will be mentioned in a Jenkins file on a branch \u2018name\u2019 condition."),Object(c.b)("h3",{id:"what-is-the-key-difference-between-a-git-rebase-and-git-merge"},"What is the key difference between a ",Object(c.b)("inlineCode",{parentName:"h3"},"git rebase")," and ",Object(c.b)("inlineCode",{parentName:"h3"},"git merge")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"git merge")," takes the unique commits from the two branches, merge them together and create another commit with the merged changes; whereas in a ",Object(c.b)("inlineCode",{parentName:"li"},"git rebase")," the work on the current branch is replayed and placed at the tip of the other branch resulting in re-writing the commit objects."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"git rebase")," is applied from the branch to be rebased, whereas ",Object(c.b)("inlineCode",{parentName:"li"},"git merge")," is applied on the branch that needs to merge the feature branch."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"git merge")," preserves the history and makes it easier to track the ownership or when a code was broken in the project history; unlike ",Object(c.b)("inlineCode",{parentName:"li"},"git rebase")," which changes the commit history by changing the commit objects (SHA-1) ids."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"git rebase")," is often used locally for feature and quickfix and bug fix branches; however ",Object(c.b)("inlineCode",{parentName:"li"},"git merge")," are used for long running stable branches.")),Object(c.b)("h3",{id:"how-do-you-list-the-commits-missing-in-your-branch-that-are-present-in-the-remote-tracking-branch"},"How do you list the commits missing in your branch that are present in the remote tracking branch?"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"git log --oneline <localBranch>..<origin/remoteBranch>\n")),Object(c.b)("p",null,"Your local git branch should be set up to track a remote branch."),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552024852388-CODE-SNIPPET.png.jpg",alt:null})),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"Divya1@Divya:initialRepo [dev] $git branch -vv\n* dev    b834dc2 [origin/dev] Add Jenkinsfile\n master b834dc2 [origin/master] Add Jenkinsfile\n")),Object(c.b)("p",null,'Reset "dev" commit history to 3 commits behind using the command:'),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552024865386-CODE-SNIPPET.png.jpg",alt:null})),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"Divya1@Divya:initialRepo [dev] $git reset --soft HEAD~3\nDivya1@Divya:initialRepo [dev] $git branch -vv\n* dev    30760c5 [origin/dev: behind 3] add source code auto build at every code checkin using docker images\n")),Object(c.b)("p",null,"Compare and list the missing logs in local \u2018dev\u2019 branch that are present in \u2018origin/dev\u2019",Object(c.b)("br",{parentName:"p"}),"\n",Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552024970909-CODE-SNIPPET.png.jpg",alt:null})),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"Divya1@Divya:initialRepo [dev] $git log --oneline dev..origin/dev\nb834dc2 (origin/master, origin/dev, master) Add Jenkinsfile\nc5e476c Rename 'prod' to 'uat'-break the build in Jenkings\n6770b16 Add database logs.\n")),Object(c.b)("p",null,"Use \u2018git pull\u2019 to sync local \u2018dev\u2019 branch with the remote \u2018origin/dev\u2019 branch."),Object(c.b)("h3",{id:"define-client-level-git-hooks-and-their-implementation"},"Define client level git hooks and their implementation."),Object(c.b)("p",null,"Git hooks are the instruction scripts that gets triggered before(pre) or post(after) certain actions or events such as a git command run."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Git hooks can be implemented on both client(local machine) and server(remote) repositories."),Object(c.b)("li",{parentName:"ul"},"Hooks objects are stored under .git/hooks directory. Hooks scripts are written in shell script and made executable."),Object(c.b)("li",{parentName:"ul"},"--Code snippet of a ",Object(c.b)("inlineCode",{parentName:"li"},"pre-commit")," script that stops the commit if a file has been deleted from the project:")),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552025076134-CODE-SNIPPET.png.jpg",alt:null})),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},'#!/bin/sh\n#Library includes:\n. .git/hooks/hooks_library.lib\n# An example hook script to verify what is about to be committed.\n# Called by "git commit" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n#Aim:Check for any Deleted file in the staging area, if any it stops you from commiting this snapshot.\nset_variables 1 $0\nif [ "$(git status --short | grep \'^D\')" ];then\n        echo "WARNING!!! Aborting the commit. Found Deleted files in the Staging area.\\n" | tee -a $LOGFILE\n        echo "git status --short | grep \'^D\' | awk -F" " \'{print $2}\'\\n" | tee -a $LOGFILE\n        exit 1;\nelse\n        echo "[OK]: No deleted files, proceed to commit." | tee -a $LOGFILE\n        exit 0;\nfi\n')),Object(c.b)("p",null,"Scenario how I implemented the hooks scripts to enforce certain pre-commit and post-commit test cases:"),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552025134167-CODE-SNIPPET.png.jpg",alt:null})),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Step 1:")," Running .git/hooks/pre-commit script."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"[OK]: No deleted files, proceed to commit.\nThu Feb  7 12:10:02 CET 2019\n--------------------------------------------\n")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Step 2:")," Running .git/hooks/prepare-commit-msg script."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"Get hooks scripts while cloning the repo. \nISSUE#7092\nEnter your commit message here.\nREADME\ncode/install_hooks.sh\ncode/runTests.sh\ndatabase.log\nhooksScripts/commit-msg\nhooksScripts/hooks_library.lib\nhooksScripts/post-commit\nhooksScripts/pre-commit\nhooksScripts/pre-rebase\nhooksScripts/prepare-commit-msg\nnewFile\nThu Feb  7 12:10:02 CET 2019\n--------------------------------------------\n")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Step 3:")," Running .git/hooks/commit-msg script."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"[OK]: Commit message has an ISSUE number\nThu Feb  7 12:10:02 CET 2019\n--------------------------------------------\n")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Step 4:")," Running .git/hooks/post-commit script."),Object(c.b)("p",null,"New commit made:"),Object(c.b)("p",null,"1c705d3 Get hooks scripts while cloning the repo.\nISSUE#7092"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A \u2018pre-rebase\u2019 script to stop the rebase on a \u2018master\u2019 branch:"),Object(c.b)("li",{parentName:"ul"},"Rebase \u2018topic\u2019 branch on \u2018master\u2019 branch")),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552025233213-CODE-SNIPPET.png.jpg",alt:null})),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"hooksProj [dev] $git rebase master topic\nWARNING!!! upstream branch is master.\nYou are not allowed to rebase on master\nThe pre-rebase hook refused to rebase.\n")),Object(c.b)("p",null,"A code snippet demonstrating the use of a \u2018",Object(c.b)("em",{parentName:"p"},"pre-receive"),"\u2019 hook that is triggered just before a \u2018push\u2019 request on the Server, can be written to reject or allow the push operation."),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552025287512-CODE-SNIPPET.png.jpg",alt:null})),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"localRepo [dev] $git push\nEnumerating objects: 3, done.\nCounting objects: 100% (3/3), done.\nWriting objects: 100% (2/2), 272 bytes | 272.00 KiB/s, done.\nTotal 2 (delta 0), reused 0 (delta 0)\nremote: pre-recieve hook script\nremote: hooks/pre-receive: [NOK]- Abort the push command\nremote:\nTo /Users/Divya1/OneDrive/gitRepos/remoteRepo/\n! [remote rejected] dev -> dev (pre-receive hook declined)\nerror: failed to push some refs to '/Users/Divya1/OneDrive/gitRepos/remoteRepo/'\n")),Object(c.b)("h3",{id:"how-do-you-create-a-new-image-in-a-container-without-using-a-dockerfile"},"How do you create a new image in a container without using a dockerfile?"),Object(c.b)("p",null,"Install a new package in a container"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"docker run -it ubuntu\nroot@851edd8fd83a:/# which yum\n--returns nothing\nroot@851edd8fd83a:/# apt-get update\nroot@851edd8fd83a:/# apt-get install -y yum\nroot@851edd8fd83a:/# which yum\n/usr/bin/yum\n")),Object(c.b)("p",null,"--Get the latest container id"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},'CONTAINER ID        IMAGE  COMMAND   CREATED STATUS                        PORTS NAMES\n851edd8fd83a        ubuntu  "/bin/bash"   6 minutes ago Exited (127) 3 minutes ago          \n')),Object(c.b)("p",null,"--base image changed"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"docker diff 851edd8fd83a\n")),Object(c.b)("p",null,"Commit the changes in the container to create a new image."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"Divya1@Divya:~ $docker commit 851edd8fd83a mydocker/ubuntu_yum\nsha256:630004da00cf8f0b8b074942caa0437034b0b6764d537a3a20dd87c5d7b25179\n")),Object(c.b)("p",null,"--List if the new image is listed"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"Divya1@Divya:~ $docker images\nREPOSITORY            TAG IMAGE ID            CREATED SIZE\nmydocker/ubuntu_yum   latest 630004da00cf        20 seconds ago 256MB\n")),Object(c.b)("h3",{id:"create-a-docker-file-and-build-a-new-image-run-the-image-and-create-a-container"},"Create a docker file and build a new image. Run the image and create a container."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"mkdir dockerFiles"),Object(c.b)("li",{parentName:"ul"},"vi dockerfile")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},'FROM divyabhushan/myrepo:latest\nCOPY hello.sh /home/hello.sh\nCMD ["bash", "/home/hello.sh"]\nCMD ["echo", "Dockerfile demo"]\nRUN echo "dockerfile demo" >> logfile\n')),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"--"),"Build an image from the dockerfile, tag the image name as \u2018mydocker\u2019"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"docker build -t mydocker dockerFiles/\ndocker build --tag <containerName> <dockerfile location>\nDivya1@Divya:~ $docker images\nREPOSITORY            TAG IMAGE ID            CREATED SIZE\nmydocker              latest aacc2e8eb26a        20 seconds ago 88.1MB\nDivya1@Divya:~ $docker run mydocker\n/home/divya\nHello Divya\nBye Divya\n")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"View the images:"),Object(c.b)("li",{parentName:"ul"},"docker image"),Object(c.b)("li",{parentName:"ul"},"docker image --all"),Object(c.b)("li",{parentName:"ul"},"docker run -it ubuntu (imageName)"),Object(c.b)("li",{parentName:"ul"},"-i = interactive"),Object(c.b)("li",{parentName:"ul"},"-t = Allocate a sudo-tty (i.e, provide a terminal for the remote container image)")),Object(c.b)("h3",{id:"develop-your-own-custom-test-environment-and-publish-it-on-the-docker-hub"},"Develop your own custom test environment and publish it on the docker hub."),Object(c.b)("p",null,"Write instructions in a dockerfile."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"build the dockerfile and create an image in the registry")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"docker build -t learn_docker dockerFiles/")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Create a container by running this image")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"docker run -it learn_docker")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Push the container to the docker hub.")),Object(c.b)("p",null,"--Tag the local image as:"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"<hub-user>/<repo-name>:[:<tag>]")),Object(c.b)("p",null,"Examples:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"docker tag learn_docker divyabhushan/learn_docker:dev\ndocker tag learn_docker divyabhushan/learn_docker:testing\n")),Object(c.b)("p",null,"--list the images for this container:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"Divya1@Divya:~ $docker images\nREPOSITORY                  TAG IMAGE ID            CREATED SIZE\ndivyabhushan/learn_docker   develop 944b0a5d82a9        About a minute ago 88.1MB\nlearn_docker                dev1.1 944b0a5d82a9        About a minute ago 88.1MB\ndivyabhushan/learn_docker   dev d3e93b033af2        16 minutes ago 88.1MB\ndivyabhushan/learn_docker   testing d3e93b033af2        16 minutes ago 88.1MB\nPush the docker images to docker hub\ndocker push divyabhushan/learn_docker:dev\ndocker push divyabhushan/learn_docker:develop\ndocker push divyabhushan/learn_docker:testing\nThe push refers to repository [docker.io/divyabhushan/ learn_docker]\n53ea43c3bcf4: Pushed\n4b7d93055d87: Pushed\n663e8522d78b: Pushed\n283fb404ea94: Pushed\nbebe7ce6215a: Pushed\nlatest: digest: sha256:ba05e9e13111b0f85858f9a3f2d3dc0d6b743db78880270524e799142664ffc6 size: 1362\n")),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552026446470-DevOps--set2--7.jpg",alt:"custom test environment"})),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Image: Screenshot from the Docker hub."),Object(c.b)("li",{parentName:"ul"},"Docker hub repository: learn_docker has different variations of images. Image names are tagged."),Object(c.b)("li",{parentName:"ul"},"We can pull the tags from this repository as per the need.")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Summarize:")),Object(c.b)("p",null,"Develop your application code and all other dependencies like the binaries, library files, downloadables required to run the application in the test environment. Bundle it all in a directory."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Edit the dockerfile to Run the downloadables and replicate the desired production environment as test env."),Object(c.b)("li",{parentName:"ul"},"Copy the entire application bundle to the test env in the docker container."),Object(c.b)("li",{parentName:"ul"},"Build the dockerfile and create new docker image and tag it."),Object(c.b)("li",{parentName:"ul"},"Push this docker image to the docker hub, which is now downloaded by other users to test.")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"NOTE:")," This docker image has your application bundle = application code + dependencies + test run time environment exactly similar to your machine. Your application bundle is highly portable with no hassles."),Object(c.b)("h3",{id:"how-do-you-prune-data-in-a-docker"},"How do you prune data in a Docker?"),Object(c.b)("p",null,"Docker provides a system prune command to remove stopped containers and dangling images.Dangling images are the ones which are not attached to any container."),Object(c.b)("p",null,"Run the `prune command as below:"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"docker system prune")),Object(c.b)("p",null,"WARNING! This will remove:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"all stopped containers"),Object(c.b)("li",{parentName:"ul"},"all networks not used by at least one container"),Object(c.b)("li",{parentName:"ul"},"all dangling images"),Object(c.b)("li",{parentName:"ul"},"all dangling build cache")),Object(c.b)("p",null,"Are you sure you want to continue? ","[y/N]"),Object(c.b)("p",null,"There is also a better and controlled way of removing containers and images using the command:"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Step 1:")," Stop the containers"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"docker stop <container_id>")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Step 2:")," Remove the stopped container"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"docker rm container_id")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"docker rm 6174664de09d\n")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Step 3:")," Remove the images, first stop the container using those images and then"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"docker rmi <image_name>:[<tag>]")),Object(c.b)("p",null,"--give image name and tag"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"docker rmi ubuntu:1.0")),Object(c.b)("p",null,"--give the image id"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"docker rmi 4431b2a715f3")),Object(c.b)("h3",{id:"explain-docker-orchestration"},"Explain Docker Orchestration"),Object(c.b)("p",null,"As the number of docker machines increases, there needs to be a system to manage them all. ",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},"Docker Orchestration"))," is a virtual docker manager and allows us to start, stop, pause, unpause or kill the docker nodes(machines)."),Object(c.b)("p",null,"Docker has an in-built utility called \u201c",Object(c.b)("em",{parentName:"p"},"docker swarm\u201d.")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Kubernetes")," is another popular and versatile docker orchestration system used. A cluster of dockers is called a \u2018",Object(c.b)("em",{parentName:"p"},"swarm"),"\u2019. Swarm turns a collection of docker engines into a single virtual docker engine."),Object(c.b)("p",null,"In a ",Object(c.b)("em",{parentName:"p"},"swarm orchestration")," arrangement, one machine acts as a ",Object(c.b)("em",{parentName:"p"},"swarm manager")," that controls all the other machines connected to the cluster that acts as ",Object(c.b)("em",{parentName:"p"},"swarm nodes"),"."),Object(c.b)("p",null,"This is how I created a swarm of dockers and managed them on my machine:"),Object(c.b)("p",null,"We need docker services and docker machines to run these services on.Finally, we need a docker swarm to manage the docker nodes/machines"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Commands we need:"),Object(c.b)("li",{parentName:"ul"},"docker service"),Object(c.b)("li",{parentName:"ul"},"docker-machine"),Object(c.b)("li",{parentName:"ul"},"docker swarm"),Object(c.b)("li",{parentName:"ul"},"Task"),Object(c.b)("li",{parentName:"ul"},"Create docker machines(nodes) and services.")),Object(c.b)("p",null,"Create a docker swarm and manage the services on different nodes and port numbers."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Step 1: Create docker machines as \u2018manager\u2019 and \u2018worker\u2019: manager, node1, node2, node3, node4"),Object(c.b)("li",{parentName:"ul"},"Step 2: Create a docker swarm"),Object(c.b)("li",{parentName:"ul"},"Step 3: Add the nodes as workers(or another manager) to the swarm"),Object(c.b)("li",{parentName:"ul"},"Step 4: From the manager create docker services"),Object(c.b)("li",{parentName:"ul"},"Step 5: list the docker services created also use -ps flag to view the node machines these services are running on."),Object(c.b)("li",{parentName:"ul"},"Step 6: Open the ",Object(c.b)("inlineCode",{parentName:"li"},"<ip_address>:<port_number>")," in the browser and confirm the services running.")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Step 1: Create docker machines: manager, node1, node2, node3, node4")),Object(c.b)("p",null,"docker-machine create --driver virtualbox manager"),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552027311324-DevOps--set2--8.jpg",alt:"driver virtualbox manager"})),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"docker-machine create --driver virtualbox node1\ndocker-machine create --driver virtualbox node2\ndocker-machine create --driver virtualbox node3\ndocker-machine create --driver virtualbox node4\n")),Object(c.b)("p",null,"--Every node is started as a virtualbox machine.\n--set docker machine \u2018manager\u2019 as active\n",Object(c.b)("inlineCode",{parentName:"p"},"eval $(docker-machine env manager)"),"\n--List the docker machines"),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552027332651-DevOps--set2--9.jpg",alt:"driver virtualbox manager"})),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Step 2: Create a docker swarm")),Object(c.b)("p",null,"--Initialize a swarm and add \u2018manager\u2019 to the swarm cluster using its ip address: 192.168.99.100"),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552027351927-DevOps--set2--10.jpg",alt:"driver virtualbox manager"})),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Step 3: Add the nodes as workers(or another manager) to the swarm")),Object(c.b)("p",null,"--Connect to each node and run the above swarm join command"),Object(c.b)("p",null,"There can be more than one \u2018manager\u2019 node in a swarm"),Object(c.b)("p",null,"--connect to node1 and join node1 to the swarm as a worker"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"docker-machine ssh node1")),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552027365983-DevOps--set2--11.jpg",alt:"driver virtualbox manager"})),Object(c.b)("p",null,"--List the nodes connected in the swarm"),Object(c.b)("p",null,"connect to manager node:"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"$docker-machine ssh manager")),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552027381641-DevOps--set2--12.jpg",alt:"driver virtualbox manager"})),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Step 4: From the \u2018manager\u2019 node create new docker services")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"docker-machine ssh manager")),Object(c.b)("p",null,"--Create service replicating them on more than 1 nodes and expose them on the mentioned port."),Object(c.b)("p",null,"This command pulls the docker image from ",Object(c.b)("a",{parentName:"p",href:"https://hub.docker.com/"},"docker hub"),"."),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552027398684-DevOps--set2--13.jpg",alt:"driver virtualbox manager"})),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552027414867-DevOps--set2--14.jpg",alt:"driver virtualbox manager"})),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552027431500-DevOps--set2--15.jpg",alt:"driver virtualbox manager"})),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Step 5: list the docker services created also use -ps flag to view the node machines these services are running on.")),Object(c.b)("p",null,"--List the services that will be shared among different swarm nodes"),Object(c.b)("p",null,"\xa0",Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552027447294-DevOps--set2--16.jpg",alt:"driver virtualbox manager"})),Object(c.b)("p",null,"Swarm randomly assigns nodes to the running services when we replicate the services."),Object(c.b)("p",null,"--service \u2018httpd\u2019 running on 3 nodes: node1, node2 and node3"),Object(c.b)("p",null,"\xa0",Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552027465675-DevOps--set2--17.jpg",alt:"driver virtualbox manager"})),Object(c.b)("p",null,"--service \u2018couchbase\u2019 is running on 2 nodes: node1 and manager at port: 8091"),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552027477756-DevOps--set2--18.jpg",alt:"driver virtualbox manager"})),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552027531359-DevOps--set2--19.jpg",alt:"driver virtualbox manager"})),Object(c.b)("p",null,"--\u2019couchbase\u2019 service can be accessed via \u2018node1\u2019 (ip: 192.168.99.101) and \u2018manager\u2019 (ip: 192.168.99.100) at port : 8091 as show below"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"http://192.168.99.101:8091/"},"http://192.168.99.101:8091/")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"http://192.168.99.100:8091"},"http://192.168.99.100:8091")),Object(c.b)("li",{parentName:"ul"},"--\u2019httpd\u2019 service"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"http://192.168.99.101:80"},"http://192.168.99.101:80")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"http://192.168.99.102:80"},"http://192.168.99.102:80")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"http://192.168.99.103:80"},"http://192.168.99.103:80")),Object(c.b)("li",{parentName:"ul"},"--\u2019my_nginx\u2019 service"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"http://192.168.99.100:8080"},"http://192.168.99.100:8080")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"http://192.168.99.104:8080"},"http://192.168.99.104:8080"))),Object(c.b)("p",null,"Screenshots of the running services:"),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552027560378-DevOps--set2--20.jpg",alt:null})),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552027583967-DevOps--set2--21.jpg",alt:"Couchbase Server"})),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552027614510-DevOps--set2--22.jpg",alt:"running services"})),Object(c.b)("p",null,"\u2018manager\u2019 node can create/inspect/list/scale or remove a service."),Object(c.b)("p",null,"Refer"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"docker service --help")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Conclusion:")),Object(c.b)("p",null,"A number of services are balanced over different nodes(machines) in a swarm cluster.A node declared as a \u2018manager\u2019 controls the other nodes.Basic \u2018docker commands\u2019 works from within a \u2018manager\u2019 node."),Object(c.b)("h3",{id:"when-joining-a-new-node-to-the-swarm-the-following-error-occurs-error-response-from-daemon-timeout-was-reached-before-node-joined-how-will-you-fix-this"},"When joining a new node to the swarm the following error occurs: \u201cError response from daemon: Timeout was reached before node joined.\u201d How will you fix this?"),Object(c.b)("p",null,"The above failure happens when the \u2018manager\u2019 docker machine is not active; as a result, the new node machine will not be able to join the swarm cluster."),Object(c.b)("p",null,"To fix this:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"Step 1:")," Check for the active machine hosts as:")),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552027988955-DevOps--set2--23.jpg",alt:"Active machine"})),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"Step 2:")," Activate the \u2018manager\u2019 machine as:")),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552028007858-DevOps--set2--24.jpg",alt:"manage"})),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"Step 3:")," Get the swarm join token as worker")),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552028022728-DevOps--set2--25.jpg",alt:"swarm join"})),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"Step 4:")," Connect to the worker machine say: worker2 ","[ To create docker node machines as worker: join node as a worker ]")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Divya1@Divya:~ $docker-machine ssh worker2")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"Step 5:")," Run the swarm join token command; it will be successful")),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552028037789-DevOps--set2--26.jpg",alt:"swarm join token command"})),Object(c.b)("h3",{id:"what-are-resources-how-do-you-handle-system-resources-in-puppet"},"What are resources? How do you handle system resources in Puppet?"),Object(c.b)("p",null,"System resources are the key elements of a Puppet code that defines the architecture and manages the configuration of a system infrastructure."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Puppet has its own DML (Declarative Modelling Language) to write code."),Object(c.b)("li",{parentName:"ul"},"The main unit of code is called a ",Object(c.b)("em",{parentName:"li"},"resource"),"."),Object(c.b)("li",{parentName:"ul"},"Puppet uses various types of resources to define the different definitions and parameters of a system.")),Object(c.b)("p",null,"Here is how a resource is written:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-json"},"resource_type { \u2018resource_name\u2019:\nattribute => value,\nattribute => value,\n\u2026\n}\n")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"Each resource has 3 items:")," Resource_type, resource_name and the attributes.")),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-json"},"user { \u2018Jack\u2019:\nensure => present,\nowner => \u2018root',\ngroup => \u2018home\u2019,\nmode => 0644,\nshell => \u2018/bin/bash\u2019\n}\n")),Object(c.b)("p",null,"This code evaluates as:",Object(c.b)("br",{parentName:"p"}),"\n","Resource type \u2018user\u2019 with the resource parameter \u2018Jack\u2019 have the attributes: \u2018ensure\u2019, \u2018owner\u2019, \u2018group\u2019, \u2018mode\u2019 and \u2018shell\u2019."),Object(c.b)("p",null,"These attributes have the respective values."),Object(c.b)("p",null,"We can get a list of all the available resource types with the command:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("em",{parentName:"li"},"puppet describe --list"))),Object(c.b)("p",null,"Some of the common resource types are:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"user"),Object(c.b)("li",{parentName:"ul"},"package"),Object(c.b)("li",{parentName:"ul"},"exec"),Object(c.b)("li",{parentName:"ul"},"file"),Object(c.b)("li",{parentName:"ul"},"service")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Example of resource_type:")," \u2018service\u2019. This resource ensures that the service: \u2018network\u2019 is running service\xa0"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-json"},"{\u2018network\u2019 :\nensure => running\n}\nThis resource checks the \u2018package\u2019: \u2018apache\u2019 is running and its pre-requisite requires \u2018apt-update\u2019 command to be executed.\npackage { \u2018apache\u2019 :\nrequire => Exec[\u2018apt-update\u2019],\nensure => running\n}\n")),Object(c.b)("h3",{id:"write-a-sample-module-to-install-lamp-on-an-existing-ubuntu-server-docker-image"},"Write a sample module to install LAMP on an existing Ubuntu Server Docker image."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Step 1: Run the Docker container with puppet server installed."),Object(c.b)("li",{parentName:"ul"},"Step 2: Write a basic manifest file:")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"vi /etc/puppet/manifests/lamp.pp")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Step 3: Add the resources to install Apache, MySQL and PHP server")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-javascript"},"exec { \u2018apt-update\u2019 :\n command => '/usr/bin/apt-get update'  \n}\n# install apache2 package\npackage { 'apache2':\n require => exec['apt-update'],        \n ensure => installed,\n}\n# ensure apache2 service is running\nservice { 'apache2':\n ensure => running,\n}\n# install mysql-server package\npackage { 'mysql-server':\n require => exec['apt-update'],        \n ensure => installed,\n}\n# ensure mysql service is running\nservice { 'mysql':\n ensure => running,\n}\n# install php5 package\npackage { 'php5':\n require => exec['apt-update'],        \n ensure => installed,\n}\n# ensure info.php file exists\nfile { '/var/www/html/info.php':\n ensure => file,\n content => '<?php  phpinfo(); ?>', # phpinfo code\n require => package['apache2'],        \n}\n")),Object(c.b)("p",null,"Save and exit."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Step 4: Apply manifest")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"puppet apply --test")),Object(c.b)("h3",{id:"how-is-jenkins-workspace-data-shared-between-different-jobs"},"How is Jenkins workspace data shared between different jobs?"),Object(c.b)("p",null,"Jenkins stores the metadata of every project under $WORKSPACE path."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Two projects"),":\xa0"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"myProject and project_next can be chained to each other and they can share the same data."),Object(c.b)("li",{parentName:"ul"},"On successful build of \u2018myProject\u2019, build of \u2018project_next\u2019 is triggered.")),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552028610162-DevOps--set2--27.jpg",alt:"Execute shell"})),Object(c.b)("p",null,"Below code screenshot is for project_next"),Object(c.b)("p",null,"This access the myProject/logs/db.log file and read it for a pattern :\u2019prod\u2019"),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552028641597-DevOps--set2--28.jpg",alt:"Execute shell"})),Object(c.b)("h3",{id:"how-can-jenkins-facilitate-deployment-in-a-devops-practice"},"How can Jenkins facilitate Deployment in a DevOps practice?"),Object(c.b)("p",null,"Jenkins auto-builds the source code from Git(any VCS) at every check-in; tests the source code and deploy the code in a tomcat environment via docker."),Object(c.b)("p",null,"Webapp source code is then deployed by tomcat server on a production environment."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Pre-requisite:")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Jenkins plugin: \u201cDeploy to container\u201d and \u201cgit plugin\u201d"),Object(c.b)("li",{parentName:"ul"},"Edit the \u2018post-build\u2019 actions to include the tomcat details."),Object(c.b)("li",{parentName:"ul"},"Under the SCM section add your git project repository url.")),Object(c.b)("p",null,"Git project structure:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"Divya1@Divya:myWeb [master] $\nDockerfile\n   webapp/\n       WEB-INF/\n         classes/\n         lib/\n         web.xml\n    index.jsp\n")),Object(c.b)("p",null,"--Dockerfile content:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},'vi Dockerfile\nFROM tomcat:9.0.1-jre8-alpine\nADD ./webapp /usr/local/tomcat/webapps/webapp\nCMD ["catalina.sh","run"]\n')),Object(c.b)("p",null,"Add a new project in Jenkins and track your git project url under SCM section.Have a dockerfile with the instruction to connect to the tomcat docker and deploy the webapp folder."),Object(c.b)("p",null,"--Add the build section to \u2018execute shell\u2019 as below:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},'#!/bin/sh\necho "Build started..."\ndocker build -t webapp .\necho "Deploying webapp to tomcat"\ndocker run -p 8888:8080 webapp\necho http://localhost:8888/webapp\n')),Object(c.b)("p",null,"--Build the project from Jenkins:"),Object(c.b)("p",null,"Below is the screenshot of the output:"),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552028781473-DevOps--set2--29.jpg",alt:"Console Output"})),Object(c.b)("p",null,"--Click on the link: http://localhost:8888/webapp"),Object(c.b)("p",null,Object(c.b)("img",{parentName:"p",src:"https://d2o2utebsixu4k.cloudfront.net/media/images/1552028880575-DevOps--set2--Divya-Bhushan.jpg",alt:"CI/CD Project"})),Object(c.b)("h3",{id:"how-does-jenkins-handle-a-failed-test-case"},"How does Jenkins handle a failed test case?"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Pipelines artifacts"),Object(c.b)("li",{parentName:"ul"},"Jenkins has built-in artifacts to record and capture the failures for analysis and investigation."),Object(c.b)("li",{parentName:"ul"},"This needs to be mentioned in the jenkinsfile pipeline:")),Object(c.b)("p",null,"Sample code:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-javascript"},"Pipeline {\nagent any\nstages {\nstage(\u2018Build\u2019) {\nsteps {\nsh \u2018./test_suite1 build\u2019\n}\n}\nStage(\u2018Test\u2019) {\nSteps {\nsh \u2018./test_suite1 test\u2019\n}\n}\n}\npost {\nalways {\narchiveArtifacts \u2018build/libs/**/*.jar\u2019\n}\n}\n}\n")),Object(c.b)("p",null,"This gives the artifacts path and the filename"),Object(c.b)("h3",{id:"how-to-backup-and-restore-jenkins-data-and-configurations"},"How to backup and restore Jenkins data and configurations"),Object(c.b)("p",null,"Backup of Jenkins is needed in case of disaster recovery, retrieving old configuration and for auditing."),Object(c.b)("p",null,"$JENKINS_HOME folder keeps all the Jenkins metadata."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"That includes:")," build logs, job configs, plugins, plugin configurations etc."),Object(c.b)("p",null,"Install the \u2018think backup\u2019 plugin in Jenkins and enable the backup from settings tab.We have to specify the backup directory and what we want to backup."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Backup directory:")," ",Object(c.b)("inlineCode",{parentName:"p"},"$JENKINS_HOME/backup")),Object(c.b)("p",null,"Backup files generated with the timestamp in the filenames will be stored under the path we specified."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"divya@jenkins backup]$ pwd\n/var/lib/Jenkins/backup\nuat@jenkins backup]$ls\n\nFULL-2019-02-4_07-14 FULL-2019-02-11_13-07\n")),Object(c.b)("p",null,"It is a good practice to version control (using Git) this back-up and move it to cloud."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Restoring:")),Object(c.b)("p",null,"Backup files are in the tar+zip format."),Object(c.b)("p",null,"Copy these over to another server; unzip and un-tar it on the server."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"cd $JENKINS_HOME\ntar xvfz /backups/Jenkins/backup-project_1.01.tar.gz\nconfig.xml\njobs/myjob/config.xml\n\u2026\n")))}k.isMDXComponent=!0},113:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),b=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=b(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=b(n),d=a,m=u["".concat(o,".").concat(d)]||u[d]||p[d]||i;return n?r.a.createElement(m,c(c({ref:t},l),{},{components:n})):r.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},114:function(e,t,n){"use strict";n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return o}));var a=n(22),r=n(115);function i(){const{siteConfig:{baseUrl:e="/",url:t}={}}=Object(a.default)();return{withBaseUrl:(n,a)=>function(e,t,n,{forcePrependBaseUrl:a=!1,absolute:i=!1}={}){if(!n)return n;if(n.startsWith("#"))return n;if(Object(r.b)(n))return n;if(a)return t+n;const o=n.startsWith(t)?n:t+n.replace(/^\//,"");return i?e+o:o}(t,e,n,a)}}function o(e,t={}){const{withBaseUrl:n}=i();return n(e,t)}},115:function(e,t,n){"use strict";function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!a(e)}n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return r}))},116:function(e,t,n){"use strict";var a=n(0),r=n.n(a),i=n(11),o=n(115),c=n(8);const s=Object(a.createContext)({collectLink:()=>{}});var l=n(114),b=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(a=Object.getOwnPropertySymbols(e);r<a.length;r++)t.indexOf(a[r])<0&&Object.prototype.propertyIsEnumerable.call(e,a[r])&&(n[a[r]]=e[a[r]])}return n};t.a=function(e){var t,{isNavLink:n,to:u,href:p,activeClassName:d,isActive:m,"data-noBrokenLinkCheck":h}=e,g=b(e,["isNavLink","to","href","activeClassName","isActive","data-noBrokenLinkCheck"]);const{withBaseUrl:j}=Object(l.b)(),O=Object(a.useContext)(s),v=u||p,f=Object(o.a)(v),y=null==v?void 0:v.replace("pathname://",""),k=void 0!==y?(e=>e.startsWith("/"))(w=y)?j(w):w:void 0;var w;const N=Object(a.useRef)(!1),D=n?i.e:i.c,x=c.a.canUseIntersectionObserver;let C;Object(a.useEffect)((()=>(!x&&f&&window.docusaurus.prefetch(k),()=>{x&&C&&C.disconnect()})),[k,x,f]);const E=null!==(t=null==k?void 0:k.startsWith("#"))&&void 0!==t&&t,S=!k||!f||E;return k&&f&&!E&&!h&&O.collectLink(k),S?r.a.createElement("a",Object.assign({href:k},v&&!f&&{target:"_blank",rel:"noopener noreferrer"},g)):r.a.createElement(D,Object.assign({},g,{onMouseEnter:()=>{N.current||(window.docusaurus.preload(k),N.current=!0)},innerRef:e=>{var t,n;x&&e&&f&&(t=e,n=()=>{window.docusaurus.prefetch(k)},C=new window.IntersectionObserver((e=>{e.forEach((e=>{t===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(C.unobserve(t),C.disconnect(),n())}))})),C.observe(t))},to:k||""},n&&{isActive:m,activeClassName:d}))}},117:function(e,t,n){"use strict";function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}t.a=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}},126:function(e,t,n){"use strict";var a=n(0),r=n(127);t.a=function(){const e=Object(a.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},127:function(e,t,n){"use strict";var a=n(0);const r=Object(a.createContext)(void 0);t.a=r}}]);